@attribute [Route(UrlConstants.JOGAR)]

@using System.Globalization
@using Blazored.LocalStorage
@using LigosGame.Modals
@using LigosGame.Constants
@using LigosGame.Models

@inject IDialogService DialogService
@inject ILocalStorageService _localStorageService
@inject NavigationManager _navegation

@if (OnInitializedCompleted)
{
    <div class="container">
        <div class="header-tabuleiro">
            @if (VisibilityBotaoIniciar)
            {
                <div class="header-tabuleiro-inicial">

                    <MudIconButton Icon="@Icons.Material.Filled.Home" Color="Color.Primary" Size="Size.Medium" OnClick="VoltarMenu" />
                    <MudIconButton Icon="@Icons.Material.Filled.PlayArrow" Color="Color.Primary" Size="Size.Medium" OnClick="@(() => {IniciarRodada(); VisibilityBotaoIniciar = false; })" />
                </div>
            }
            else
            {
                <h1>@_timerCount.ToString("0") - @TemaSorteado.Nome</h1>
                <div class="timer-container">
                    <div class="timer-bar" style="width: @GetTimerPercentage()%; transition-duration: @GetTransitionDuration()s; background-color: @GetTimerColor();"></div>
                </div>
                <div class="game-info">
                    <span>Letras: @_listaLetrasSelecionadas.Count/26</span>
                </div>
            }
        </div>

        <div class="tabuleiro">
            <div class="center-button">
                <button type="button" @onclick="@OnCenterButtonClick">
                    @if (_currentCharSelected != default)
                    {
                        @_currentCharSelected
                    }
                    else if (!VisibilityBotaoIniciar)
                    {
                        <span>Selecione<br>uma letra</span>
                    }
                    else
                    {
                        <span>Aguardando<br>Inicio...</span>
                    }
                </button>
            </div>

            <div class="letras">
                @for (int i = 0; i < 26; i++)
                {
                    char letra = (char)('A' + i);
                    <div class="letter-button" style="transform: rotate(@(ObterCalculoRotacao(i))deg) translate(180px) rotate(@(ObterCalculoRotacao(-i))deg);">
                        <button class="@(_currentCharSelected == letra ? "current-button-selected" : "")"
                                type="button"
                                @onclick="@(() => TratarSelecaoLetra(letra))"
                                disabled="@_listaLetrasSelecionadas.Contains(letra)">
                            @(letra)
                        </button>
                    </div>
                }
            </div>
        </div>

        <div class="footer-tabuleiro">
            @if (VisibilityBotaoIniciar)
            {
                <h1>Aguardando início...</h1>
            }
            else
            {
                <div class="inverter">
                    <h1>@_timerCount.ToString("0") - @TemaSorteado.Nome</h1>
                    <div class="timer-container">
                        <div class="timer-bar" style="width: @GetTimerPercentage()%; transition-duration: @GetTransitionDuration()s; background-color: @GetTimerColor();"></div>
                    </div>
                    <div class="game-info">
                        <span>Letras: @_listaLetrasSelecionadas.Count/26</span>
                    </div>
                </div>
            }
        </div>
    </div>
}
else
{
    <CarregandoComponent />
}

@code {
    #region Declaration
    private double _timerCount { get; set; }
    private int _maxTime { get; set; }
    private System.Timers.Timer Timer;
    private char _currentCharSelected { get; set; }
    private List<char> _listaLetrasSelecionadas { get; set; } = new();
    private Configuracao _configObj { get; set; }
    private List<Guid> _listaTemasUtilizados { get; set; } = new();
    private Tema TemaSorteado { get; set; } = new();
    private bool VisibilityBotaoIniciar { get; set; } = true;
    private bool OnInitializedCompleted { get; set; }
    private bool _isTimerRunning { get; set; }
    #endregion

    #region Functions
    protected override async Task OnInitializedAsync()
    {
        TimerConfig();
        _configObj = await _localStorageService.GetItemAsync<Configuracao>(StorageConstants.CONFIGURACAO_KEY);
        _maxTime = _configObj.ObterSegundosRodada();
        OnInitializedCompleted = true;
    }

    private async Task GameOver()
    {
        _isTimerRunning = false;
        await AbrirModalMensagem("Game Over", $"O tempo acabou! \nA pontuação foi de: {_listaLetrasSelecionadas.Count}/26");
    }

    private async Task OnCenterButtonClick()
    {
        if (_currentCharSelected == default) return;

        _currentCharSelected = default;

        if (_listaLetrasSelecionadas.Count == 26)
        {
            await AbrirModalMensagem("Vitória", "Parabéns, todas as letras foram adivinhadas!");
            Timer.Stop();
            _isTimerRunning = false;
            return;
        }

        StartCount();
    }

    private void TratarSelecaoLetra(char letraSelecionada)
    {
        if (_currentCharSelected != default || VisibilityBotaoIniciar) return;

        _listaLetrasSelecionadas.Add(letraSelecionada);
        _currentCharSelected = letraSelecionada;
        StateHasChanged();
    }

    private string ObterCalculoRotacao(int posicaoLetra)
    {
        return (posicaoLetra * 13.85).ToString(CultureInfo.InvariantCulture);
    }

    private async Task AbrirModalMensagem(string titulo, string mensagem)
    {
        var options = new DialogOptions
            {
                BackdropClick = false,
                MaxWidth = MaxWidth.Large
            };

        var parameters = new DialogParameters<GameOverDialog>
        {
            {p => p.Titulo, titulo},
            {p => p.Mensagem, mensagem},
            {p => p.EventoProximaRodada, new EventCallbackFactory().Create(this, new Action(IniciarRodada))},
        };

        var dialog = await DialogService.ShowAsync<GameOverDialog>("Alerta", parameters, options);
    }

    private void IniciarRodada()
    {
        if (_listaTemasUtilizados.Count == _configObj.ListaTema.Count) _listaTemasUtilizados.Clear();

        var listFiltrada = _configObj.ListaTema.Where(w => !_listaTemasUtilizados.Contains(w.Id)).ToList();

        Random random = new Random();
        var indicie = random.Next(0, listFiltrada.Count);
        var tema = listFiltrada[indicie];

        TemaSorteado = tema;
        _listaTemasUtilizados.Add(tema.Id);
        _listaLetrasSelecionadas = new();
        _currentCharSelected = default;

        StartCount();
    }

    private void VoltarMenu() => _navegation.NavigateTo(UrlConstants.INDEX);

    #region Timer

    private void StartCount()
    {
        _timerCount = _configObj.ObterSegundosRodada();
        _isTimerRunning = true;
        Timer.Start();
        InvokeAsync(StateHasChanged);
    }

    private void TimerConfig()
    {
        Timer = new System.Timers.Timer();
        Timer.Elapsed += async (s, e) => await ElapsedEvent();
        Timer.AutoReset = true;
        Timer.Interval = 1000; // Mudado para 1 segundo para maior estabilidade
    }

    private async Task ElapsedEvent()
    {
        if (_timerCount <= 0)
        {
            Timer.Stop();
            _isTimerRunning = false;
            await InvokeAsync(async () =>
            {
                await GameOver();
                StateHasChanged();
            });
            return;
        }

        _timerCount -= 1; // Mudado para decrementar 1 segundo por vez
        await InvokeAsync(StateHasChanged);
    }

    private string GetTimerPercentage()
    {
        if (_maxTime <= 0) return "0";
        double percentage = (_timerCount / (double)_maxTime) * 100;
        return Math.Max(0, percentage).ToString("0.##", CultureInfo.InvariantCulture);
    }

    private string GetTransitionDuration()
    {
        return _isTimerRunning ? "1.0" : "0.3";
    }

    private string GetTimerColor()
    {
        if (_maxTime <= 0) return "rgb(231, 76, 60)";

        double percentage = (_timerCount / (double)_maxTime) * 100;

        percentage = Math.Max(0, Math.Min(100, percentage));

        int red, green, blue;

        if (percentage > 50)
        {
            red = (int)(255 * (100 - percentage) / 50);
            green = 255;
            blue = 0;
        }
        else
        {
            red = 255;
            green = (int)(255 * percentage / 50);
            blue = 0;
        }

        return $"rgb({red}, {green}, {blue})";
    }

    #endregion
    #endregion
}
